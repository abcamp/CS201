---
title: "Homework 8: Class Wrap-up"
format: html
editor: visual
---

## Homework 8: Class Wrap-up

We are finally at the end of the semester! The final homework for the class will be to summarize and share some of the things we've done so far.

The plan is for everyone to be randomly paired with a tiny topic pertaining to something we've learned together this semester and then submit a code snippet to be presented in class on Wednesday, 11/20.

#### Libraries

```{r, message=FALSE}
library(tidyverse)
library(here)
```

#### Read in the list of topics

```{r, message=FALSE}
topics <- read_csv("data/cs201_topics.csv")
view(topics)

# anything to edit?
topics[7, "topic"] <- "wildcard"
```

#### Read in the list of student names

```{r, message=FALSE}
names <- read_csv("data/cs201_names.csv")
view(names)
```

#### Generate a random number in the names dataframe

```{r, message=FALSE}
names <- names %>%
  mutate(number = sample(1:8, nrow(names), replace = FALSE))

view(names)
```

#### Join the names to the topics

```{r, message=FALSE}
assigned_topics <- names %>%
  full_join(topics, by = "number")

print(assigned_topics)

# write.csv(assigned_topics, "data/assigned_topics_111524.csv")
assigned_in_class <- read_csv("data/assigned_topics_111524.csv")
assigned_in_class <- assigned_in_class %>%
  arrange(number)
print(assigned_in_class)

# note that if you run the above script and randomize the names again, your outcome will be different from mine.
# go with the topics in assigned_in_class and announced on Canvas!
```

## Instructions

1.  Find your assigned topic. Talk to me if you reeeeeeaaaally want to do something else, or trade with someone (but let me know).

2.  Prepare a code snippet that briefly (2-3 mins) explains the topic in the code chunk below, using `penguins` data.

3.  Push to GitHub BY NOON on Wednesday 11/20 (I'll need time to download and compile before class).

4.  Come to class next Wednesday and show us how it's done :)

#### Extra libraries needed (if any)

```{r, message=FALSE}
library(janitor)
library(naniar)
library(gtExtras)
library(plotly)
```

#### Read in penguins data

```{r, message=FALSE}
penguins <- read_csv(here("data/penguins_lter.csv"))

penguins <- penguins %>% 
  clean_names()
```

## Rhyn

```{r, message=FALSE}
# insert code snippet here

```

## Alexander (dplyr::filter)

#### Filter by categorical variable

```{r, message=FALSE}
penguins %>%
  filter(sex == "MALE")
```

```{r}
penguins %>% 
  filter(species == "Adelie Penguin (Pygoscelis adeliae)")
```

#### Add to it's own dataframe

```{r}
female_penguins <- penguins %>%
  filter(sex == "FEMALE")
```

#### Filter by numeric Variable

```{r}
penguins %>%
  filter(flipper_length_mm >= 200)
```

#### Filter by multiple variables

```{r}
penguins %>%
  filter(flipper_length_mm < 200, sex == "MALE")
```

#### Filter for multiple of the same variable

```{r}
penguins %>%
  filter( species == "Adelie Penguin (Pygoscelis adeliae)", island == "Biscoe" | island == "Torgersen")
```

## Izack

```{r, message=FALSE}
# insert code snippet here

```

## Lydia

```{r, message=FALSE}
# insert code snippet here

```

## Faith (plotly)

Plotly function: Makes plots interactive.

```{r, message=FALSE}
flipper_culmen <- ggplot(data = penguins, aes(x = culmen_length_mm, y = flipper_length_mm)) + geom_point()

ggplotly(flipper_culmen)

# can also add more information to the tooltip
flipper_culmen <- ggplot(data = penguins, aes(x = culmen_length_mm, y = flipper_length_mm, label = species)) + 
  geom_point()

ggplotly(flipper_culmen)
```

## Alexandrea (Naniar)

"Naniar" is an R package designed to handle, visualize, and explore missing data effectively.

Some functions of naniar that are beneficial are `miss_var_summary()`, which summarizes the amount of missing data in variables, `gg_miss_var()`, which visualizes the distribution of missing data in variables, and `geom_miss_point()`, which allows for visualizing missingness within scatterplots to explore patterns in missing data across two variables.

#### Explore Missing Data:

The first function provides a summary of the missing values for each variable in the dataset. It returns the number and proportion of missing values for all variables.

The second function combines a summary table (`miss_var_summary()`) and a bar plot (`gg_miss_var()`) to provide both tabular and visual representations of missing values in the dataset.

```{r}
miss_var_summary(penguins)

miss_var_summary(penguins) %>% 
  gt() %>%
  gt_theme_guardian() %>% 
  tab_header(title = "Missingness of variables")
```

#### Plotting Missing Data in Distribution:

The first creates a bar plot showing the number of missing values for each variable. It is a quick visual way to assess missingness.

The second combines a summary table (`miss_var_summary()`) and a bar plot (`gg_miss_var()`) to provide both tabular and visual representations of missing values in the dataset.

```{r}
# plot
gg_miss_var(penguins) # basic plot

penguins %>% miss_var_summary()
gg_miss_var(penguins)
```

#### Visualizing Missingness with Scatter plots:

The first scatter plot visualizes missing data in the variables `sex` and `culmen_length_mm`. The `geom_miss_point()` function highlights missing values within the data points, enabling an exploration of patterns of missingness.

The second is similar to the previous scatter plot but faceted by `island`. This allows you to examine missingness patterns across different islands in the dataset.

```{r}
ggplot(penguins, aes(x = sex, y = culmen_length_mm)) +
  geom_miss_point() +
  theme_bw(base_size = 16) +
  labs(title = "Culmen Length by Sex",
       caption = paste0("Source: ggplot2::penguins")) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))

ggplot(penguins, aes(x = sex, y = culmen_length_mm)) +
  geom_miss_point() +
  theme_bw(base_size = 16) +
  labs(title = "Culmen Length by Sex",
       caption = paste0("Source: ggplot2::penguins")) +
  facet_wrap(~island) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))

```

## Mehana

```{r, message=FALSE}
# insert code snippet here

```

## Christian (dplyr::summarize)

```{r, message=FALSE, warning=FALSE}
#summarize by culmen length
individ_culmen_length <- penguins %>%
  group_by(individual_id) %>%
  summarize(culmen_length_mm) 

#summarize culmen length on each island 
culmen_length_island <- penguins %>%
  group_by(island) %>%
  summarize(mean_culmen_length_mm = mean(culmen_length_mm, na.rm = TRUE))

#summarize culmen length by species, include sd 
culmen_length_species <- penguins %>%
  group_by(island) %>%
  summarize(mean_culmen_length_mm = mean(culmen_length_mm, na.rm = TRUE), sd = sd(culmen_length_mm, na.rm = TRUE)) 
```
